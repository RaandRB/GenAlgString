from fitness_functions import *
from bitarray import bitarray
from line_profiler import LineProfiler

M = CICY([[1,2], [1,2], [1,2], [1,2]])
#M = CICY([[1,1,1], [1,1,1], [1,1,1], [1,1,1], [1,1,1]])

sols1 = [[[-1, 0, 2, 2], [0, 0, -1, 1], [0, 0, -1, 1], [0, 1, 0, -3], [1, -1, 0, -1]], 
        [[-1, 0, 1, 3], [0, 0, 1, -1], [0, 0, 1, -1], [0, 0, 1, -1], [1, 0, -4, 0]], 
        [[-1, 0, 1, 3], [0, 0, 1, -1], [0, 0, 1, -1], [0, 1, -4, 0], [1, -1, 1, -1]], 
        [[-1, 0, 1, 2], [0, 0, 1, -1], [0, 0, 1, -1], [0, 1, -4, 0], [1, -1, 1, 0]], 
        [[-1, 0, 1, 1], [0, -2, 1, 1], [0, 1, -1, 0], [0, 1, -1, 0], [1, 0, 0, -2]], 
        [[-1, 0, 0, 1], [-1, -1, 1, 0], [-1, 0, 0, 1], [1, -1, 0, 0], [2, 2, -1, -2]], 
        [[-1, 0, 0, 1], [-1, 0, 0, 1], [-1, 0, 0, 1], [1, -2, 1, -1], [2, 2, -1, -2]], 
        [[-1, 0, 0, 1], [-1, 0, 1, -1], [0, -2, 1, 2], [1, 1, -1, -1], [1, 1, -1, -1]], 
        [[-1, -1, 1, 1], [-2, 1, -1, 1], [-1, -1, 1, 1], [2, 0, 1, -2], [2, 1, -2, -1]], 
        [[-1, -1, 1, 1], [-1, -1, 1, 1], [-1, -1, 1, 1], [1, 2, -3, -1], [2, 1, 0, -2]]]

sols1_part = [[[-1, 0, 2, 2], [0, 0, -1, 1], [0, 0, -1, 1], [0, 1, 0, -3]], 
        [[-1, 0, 1, 3], [0, 0, 1, -1], [0, 0, 1, -1], [0, 0, 1, -1]], 
        [[-1, 0, 1, 3], [0, 0, 1, -1], [0, 0, 1, -1], [0, 1, -4, 0]], 
        [[-1, 0, 1, 2], [0, 0, 1, -1], [0, 0, 1, -1], [0, 1, -4, 0]], 
        [[-1, 0, 1, 1], [0, -2, 1, 1], [0, 1, -1, 0], [0, 1, -1, 0]], 
        [[-1, 0, 0, 1], [-1, -1, 1, 0], [-1, 0, 0, 1], [1, -1, 0, 0]], 
        [[-1, 0, 0, 1], [-1, 0, 0, 1], [-1, 0, 0, 1], [1, -2, 1, -1]], 
        [[-1, 0, 0, 1], [-1, 0, 1, -1], [0, -2, 1, 2], [1, 1, -1, -1]], 
        [[-1, -1, 1, 1], [-2, 1, -1, 1], [-1, -1, 1, 1], [2, 0, 1, -2]], 
        [[-1, -1, 1, 1], [-1, -1, 1, 1], [-1, -1, 1, 1], [1, 2, -3, -1]]]



sols2 = [[[1, -2, 0, 2], [-1, 1, 0, 1], [-1, 1, 2, -1], [0, 1, -1, -2], [1, -1, -1, 0]], 
         [[1, -2, 0, 2], [-2, 1, 1, -1], [-1, 0, 1, -1], [1, 0, -1, 1], [1, 1, -1, -1]], 
         [[1, -2, 0, 2], [-2, 1, 2, -1], [-1, 1, 2, -2], [1, 1, -1, -2], [1, -1, -3, 3]], 
         [[1, -2, 0, 2], [-1, 1, 0, 2], [-1, 0, 1, 0], [0, 0, 0, 0], [1, 1, -1, -4]], 
         [[1, -2, 0, 2], [-2, 1, 1, -1], [-1, 0, 1, -2], [1, 0, -1, 2], [1, 1, -1, -1]]]

count = 0



r = 4



Gamma = np.array([
    [0,1,0],
    [0,0,1],
    [1,0,0]  # cyclic permutation
])

V_good = [
    [1,0,0],
    [0,1,0],
    [0,0,1],
    [1,0,0]  # duplicate
]

V_bad = [
    [1,0,0],
    [1,0,0]
]
for _ in range(10):
        t1 = time.time()
        t = invariant_partition_or_penalty(V_good, Gamma)
        t2 = time.time()
        print(t2-t1)

